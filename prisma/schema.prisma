generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  USER
  ARTIST
}

model Users {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String            @unique
  image           String?           @default("user.jpg")
  password        String
  type            UserType
  balance         Float             @default(0)
  isVerified      Boolean           @default(false)
  number          String?
  address         String?
  dateOfBirth     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Notifications   Notifications[]
  OTPs            OTPs[]
  Ads             Ads[]
  Payments        Payments[]
  Musics          Musics[]
  Likes           Likes[]
  PlayLists       PlayLists[]
  ReSells         ReSells[]
  PurchasedMusics PurchasedMusics[]
  Transactions    Transactions[]
  Withdrawals     Withdrawals[]
}

model Notifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Subscriptions {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float
  duration  Int
  benefits  String[]
  isDeleted Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Payments  Payments[]
}

model OTPs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  code      String
  expiredAt DateTime
  createdAt DateTime @default(now())
}

model Ads {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  venue       String
  date        String
  time        String
  userId      String   @db.ObjectId
  user        Users    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payments {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  user           Users         @relation(fields: [userId], references: [id])
  amount         Float
  transactionId  String
  subscriptionId String        @db.ObjectId
  expireAt       DateTime
  subscription   Subscriptions @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model AppData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  about     String
  privacy   String
  terms     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Musics {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  user            Users             @relation(fields: [userId], references: [id])
  name            String
  image           String
  audio           String
  price           Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Likes           Likes[]
  ReSells         ReSells[]
  PurchasedMusics PurchasedMusics[]
  PlayListMusics  PlayListMusics[]
  Transactions    Transactions[]
}

model Likes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  musicId   String   @db.ObjectId
  music     Musics   @relation(fields: [musicId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, musicId])
}

model PlayLists {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @db.ObjectId
  user           Users            @relation(fields: [userId], references: [id])
  name           String
  createdAt      DateTime         @default(now())
  PlayListMusics PlayListMusics[]

  @@unique([userId, name])
}

model PlayListMusics {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  playListId String    @db.ObjectId
  playList   PlayLists @relation(fields: [playListId], references: [id])
  musicId    String    @db.ObjectId
  music      Musics    @relation(fields: [musicId], references: [id])
  createdAt  DateTime  @default(now())

  @@unique([playListId, musicId])
}

model Transactions {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  buyerId             String   @db.ObjectId
  buyer               Users    @relation(fields: [buyerId], references: [id])
  sellerId            String   @db.ObjectId
  amount              Float
  musicId             String   @db.ObjectId
  music               Musics   @relation(fields: [musicId], references: [id])
  quantity            Int
  stripeTransactionId String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model PurchasedMusics {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  musicId   String   @db.ObjectId
  music     Musics   @relation(fields: [musicId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, musicId])
}

model ReSells {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  musicId   String   @db.ObjectId
  music     Musics   @relation(fields: [musicId], references: [id])
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, musicId])
}

// model Wallets {
//   id          String        @id @default(auto()) @map("_id") @db.ObjectId
//   userId      String        @unique @db.ObjectId
//   user        Users         @relation(fields: [userId], references: [id])
//   balance     Float         @default(0)
//   bankName    String?
//   accountNo   String?
//   accountType String?
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   Withdrawals Withdrawals[]
// }

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Withdrawals {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  user        Users            @relation(fields: [userId], references: [id])
  amount      Int
  bankName    String
  accountNo   String
  accountType String
  status      WithdrawalStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ReviewLinks {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
