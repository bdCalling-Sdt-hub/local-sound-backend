generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  USER
  ARTIST
}

model Users {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  image         String?
  password      String
  type          UserType
  isVerified    Boolean         @default(false)
  number        String?
  address       String?
  dateOfBirth   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Notifications Notifications[]
  OTPs          OTPs[]
  Ads           Ads[]
  Payments      Payments[]
  Withdrawals   Withdrawals[]
  Musics        Musics[]
  Likes         Likes[]
  playLists     playLists[]
}

model Notifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Subscriptions {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float
  duration  Int
  Benefits  String[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Payments  Payments[]
}

model OTPs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  code      String
  expiredAt DateTime
  createdAt DateTime @default(now())
}

model Ads {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  venue       String
  date        String
  time        String
  userId      String   @db.ObjectId
  user        Users    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payments {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  user           Users         @relation(fields: [userId], references: [id])
  amount         Float
  transactionId  String
  subscriptionId String        @db.ObjectId
  expireAt       DateTime
  subscription   Subscriptions @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model AppData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  about     String
  privacy   String
  terms     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Withdrawals {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  user        Users            @relation(fields: [userId], references: [id])
  amount      Int
  bankName    String
  accountNo   String
  accountType String
  status      WithdrawalStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Musics {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  user            Users             @relation(fields: [userId], references: [id])
  name            String
  image           String
  audio           String
  price           Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Likes           Likes[]
  playListsMusics playListsMusics[]
}

// model Transactions {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   buyerId   String   @db.ObjectId
//   sellerId  String   @db.ObjectId
//   seller    Users    @relation(fields: [sellerId], references: [id])
//   amount    Float
//   musicId   String   @db.ObjectId
//   music     Musics   @relation(fields: [musicId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Likes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  musicId   String   @db.ObjectId
  music     Musics   @relation(fields: [musicId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, musicId])
}

model playLists {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  user            Users             @relation(fields: [userId], references: [id])
  name            String
  createdAt       DateTime          @default(now())
  playListsMusics playListsMusics[]

  @@unique([userId, name])
}

model playListsMusics {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  playListId String    @db.ObjectId
  playList   playLists @relation(fields: [playListId], references: [id])
  musicId    String    @db.ObjectId
  music      Musics    @relation(fields: [musicId], references: [id])
  createdAt  DateTime  @default(now())

  @@unique([playListId, musicId])
}
